@inject IRegistrationService RegService
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<EditForm Model="@registerUser" OnValidSubmit="HandleValidSubmit">
    <h2 class="text-center text-primary">Sign up</h2>
    <hr />
    <div class="form-group">
        <InputText @bind-Value="registerUser.Username" class="form-control" type="text" placeholder="Username" />
    </div>
    <div class="form-group">
        <InputText @bind-Value="registerUser.Password" class="form-control" type="password" placeholder="Password" />
    </div>
    <div class="form-group">
        <InputText @bind-Value="registerUser.ConfirmPassword" class="form-control" type="password" placeholder="Confirm password" />
    </div>
    <div class="form-group text-center">
        <button class="btn btn-success mx-2" type="submit">Register</button>
        <button class="btn btn-outline-danger mx-2" type="button" @onclick="() => HandleCancel()">Cancel</button>
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>

@if (showRegError)
{
    <div class="alert alert-danger" role="alert">
        <p>@regErrorText</p>
    </div>
}

@code {
    private RegisterUserModel registerUser = new();
    private bool showRegError = false;
    private string regErrorText = "";

    private async Task HandleValidSubmit()
    {
        showRegError = false;
        regErrorText = "";

        Tuple<bool, string> regResult = await RegService.RegisterAsync(registerUser);

        if (regResult.Item1)
        {
            LoginUserModel loginUser = new();
            loginUser.Username = registerUser.Username;
            loginUser.Password = registerUser.Password;
            await AuthService.LoginAsync(loginUser);
        }
        else
        {
            showRegError = true;
            regErrorText = regResult.Item2;
        }

        registerUser = new();
    }

    private void HandleCancel()
    {
        NavManager.NavigateTo("/");
    }
}
