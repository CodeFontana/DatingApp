@inject IAuthenticationService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<AuthorizeView Context="AuthContext">
    <Authorized>
        <nav id="navbarAuth" class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
            <button class="navbar-toggler" type="button" @onclick="() => expandNavLinks = !expandNavLinks">
                <span class="navbar-toggler-icon"></span>
            </button>

            @if (expandNavLinks)
            {
                <a class="navbar-brand mx-auto" href="#">Dating App</a>
                <div class="dropdown-menu show" aria-labelledby="navbarDropdown" @onclick="() => expandNavLinks = !expandNavLinks">
                    <NavLink class="nav-link text-dark mx-2" href="/members" Match="NavLinkMatch.All">
                        Matches
                    </NavLink>
                    <NavLink class="nav-link text-dark mx-2" href="/lists" Match="NavLinkMatch.All">
                        Lists
                    </NavLink>
                    <NavLink class="nav-link text-dark mx-2" href="/messages" Match="NavLinkMatch.All">
                        Messages
                    </NavLink>
                </div>
            }
            else
            {
                <a class="navbar-brand mr-4" href="#">Dating App</a>
                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav mr-auto">
                        <NavLink class="nav-link text-light mx-2" href="/members" Match="NavLinkMatch.All">
                            Matches
                        </NavLink>
                        <NavLink class="nav-link text-light mx-2" href="/lists" Match="NavLinkMatch.All">
                            Lists
                        </NavLink>
                        <NavLink class="nav-link text-light mx-2" href="/messages" Match="NavLinkMatch.All">
                            Messages
                        </NavLink>
                    </ul>
                </div>
            }

            <div class="nav-item dropdown show">
                <NavLink class="nav-link text-light" @onclick="() => expandWelcomeMenu = !expandWelcomeMenu" id="navbarDropdown">
                    Welcome @AuthContext.User.Identity.Name
                </NavLink>

                @if (expandWelcomeMenu)
                {
                    <div class="dropdown-menu show" aria-labelledby="navbarDropdown" @onclick="() => expandWelcomeMenu = !expandWelcomeMenu">
                        <NavLink class="nav-link text-dark" href="">
                            Edit Profile
                        </NavLink>
                        <div class="dropdown-divider"></div>
                        <NavLink class="nav-link text-dark" @onclick="() => HandleLogout()">
                            Logout
                        </NavLink>
                    </div>
                }
            </div>
        </nav>
    </Authorized>
    <NotAuthorized>
        <nav id="navbarUnAuth" class="navbar navbar-expand navbar-dark fixed-top bg-dark">
            <a class="navbar-brand mr-4" href="#">Dating App</a>
            <EditForm Model="@loginUser" class="form-inline">
                <div id="loginform" class="form-row">
                    <InputText @bind-Value="loginUser.Username" class="form-control userinput" type="text" placeholder="Username" />
                    <InputText @bind-Value="loginUser.Password" class="form-control userinput" type="password" placeholder="Password" />
                    <div id="buttongroup" class="form-group">
                        <button class="btn btn-primary" type="submit" @onclick="() => HandleLogin()">Login</button>
                        <button class="btn btn-success mx-2" type="submit" @onclick="() => HandleRegister()">Register</button>
                    </div>
                </div>
            </EditForm>
        </nav>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginUserModel loginUser = new();
    private bool expandWelcomeMenu = false;
    private bool expandNavLinks = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/members");
        }
    }

    private async Task HandleLogin()
    {
        AuthUserModel authUser = await AuthService.LoginAsync(loginUser);
        loginUser = new();

        if (authUser != null && string.IsNullOrWhiteSpace(authUser.Token) == false)
        {
            NavManager.NavigateTo("/members");
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        NavManager.NavigateTo("/");
    }

    private void HandleRegister()
    {
        NavManager.NavigateTo("/register");
    }
}
