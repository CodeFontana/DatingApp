@inject IRegistrationService RegService
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<div class="container">
    <div class="row justify-content-center">
        <div class="col-xs-12 col-md-6 col-lg-4">
            <EditForm Model="@registerUser" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <h2 class="text-center text-primary">Sign up</h2>
                <hr />
                <div class="form-group">
                    <InputText @bind-Value="registerUser.Username" class="form-control" type="text" placeholder="Username" />
                    <ValidationMessage For="(() => registerUser.Username)" />
                </div>
                <div class="form-group">
                    <InputText @bind-Value="registerUser.Password" class="form-control" type="password" placeholder="Password" />
                    <ValidationMessage For="(() => registerUser.Password)" />
                </div>
                <div class="form-group">
                    <InputText @bind-Value="registerUser.ConfirmPassword" class="form-control" type="password" placeholder="Confirm password" />
                    <ValidationMessage For="(() => registerUser.ConfirmPassword)" />
                </div>
                <div id="buttongroup" class="form-group text-center">
                    <button class="btn btn-success mx-2" type="submit">Create Account</button>
                    <button class="btn btn-outline-danger mx-2" type="button" @onclick="() => HandleCancel()">Cancel</button>
                </div>
            </EditForm>

            @if (showRegError)
            {
                <div class="alert alert-danger text-center" role="alert">
                    @regErrorText
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnCancelRegistration { get; set; }

    private RegisterUserModel registerUser = new();
    private bool showRegError = false;
    private string regErrorText;

    private async Task HandleValidSubmit()
    {
        showRegError = false;
        regErrorText = "";

        Tuple<bool, string> regResult = await RegService.RegisterAsync(registerUser);

        if (regResult.Item1)
        {
            await AuthService.LoginAsync(new() { Username = registerUser.Username, Password = registerUser.Password });
            NavManager.NavigateTo("/");
        }
        else
        {
            showRegError = true;
            regErrorText = regResult.Item2;
        }

        registerUser = new();
    }

    private void HandleCancel()
    {
        OnCancelRegistration.InvokeAsync(true);
    }
}