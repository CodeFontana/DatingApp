@inject IToastService ToastService
@inject IMemberService MemberService
@inject ISpinnerService SpinnerService

@if (showError)
{
    <div class="alert alert-danger" role="alert">
        @errorText
    </div>
}

<div>
    <div class="row">
        @foreach (PhotoModel p in Member.Photos)
        {
            <PhotoCard Username="@Member.Username" Photo="@p" OnImageChanged="HandleImageDeleted" />
        }
    </div>

    <h3 class="mt-2">Add Photos</h3>

    <div class="form-group drag-drop-zone">
        <i class="fa fa-upload fa-3x"></i>
        Drop new photo here
        <InputFile disabled="@uploading" OnChange="HandleImageUpload" accept="image/*" />
    </div>
</div>

@code {
    [Parameter]
    public MemberModel Member { get; set; }

    [Parameter]
    public EventCallback<string> OnImageChanged { get; set; }

    private long maxFileSize = 1024 * 1024 * 10;
    private bool uploading = false;
    private bool showError = false;
    private string errorText;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            uploading = true;
            IBrowserFile imageFile = e.File;

            if (imageFile == null)
            {
                throw new Exception("Image file not found");
            }
            else if (imageFile.Size > maxFileSize)
            {
                throw new Exception($"Image file exceeds maximum size [{maxFileSize} bytes]");
            }

            StreamContent fileContent = new(imageFile.OpenReadStream(maxFileSize));

            using MultipartFormDataContent content = new();
            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: imageFile.Name);

            ServiceResponseModel<PhotoModel> result = await MemberService.AddPhotoAsync(Member.Username, content);

            if (result.Success)
            {
                ToastService.ShowSuccess("Photo added successfully");
                showError = false;
                await OnImageChanged.InvokeAsync();
            }
            else
            {
                showError = true;
                errorText = $"{result.Message}";
                ToastService.ShowError($"{result.Message}");
            }
        }
        catch (Exception ex)
        {
            showError = true;
            errorText = $"{ex.Message}";
            ToastService.ShowError($"{ex.Message}");
        }
        finally
        {
            uploading = false;
        }
    }

    private async Task HandleImageDeleted()
    {
        await OnImageChanged.InvokeAsync();
    }
}
