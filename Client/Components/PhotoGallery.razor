@inject IMemberService MemberService
@inject ISpinnerService SpinnerService

@if (SpinnerService.HoldSpinner == false)
{
    <div class="carousel slide" data-ride="carousel">
        <div class="carousel-inner">
            @for (int i = 0; i < Member.Photos.Count; i++)
            {
                <div class="carousel-item @(i == position ? "active":"")">
                    <img class="img-fluid rounded mx-auto d-block centerstage" src="@Member.Photos[i].Filename">
                </div>
            }
        </div>
        <a class="carousel-control-prev" role="button" data-slide="prev" @onclick="HandlePrev">
            <span class="carousel-control-prev-icon"></span>
        </a>
        <a class="carousel-control-next" role="button" data-slide="next" @onclick="HandleNext">
            <span class="carousel-control-next-icon"></span>
        </a>
    </div>
    <div class="row">
        @for (int i = 0; i < Member.Photos.Count; i++)
        {
            int buttonIndex = i;
            <div class="col-12 col-sm-6 col-lg-4 col-xl-3">
                <img class="img-thumbnail rounded" src="@Member.Photos[i].Filename" @onclick="() => HandleThumbnailClick(buttonIndex)">
            </div>
        }
    </div>   
}

@code {
    [Parameter]
    public MemberModel Member { get; set; }

    private int position = 0;
    
    protected override async Task OnParametersSetAsync()
    {
        SpinnerService.HoldSpinner = true;

        foreach (PhotoModel p in Member.Photos)
        {
            p.Filename = await MemberService.GetPhotoAsync(Member.Username, p.Filename);
        }

        SpinnerService.HoldSpinner = false;
    }

    private void HandleNext()
    {
        if (position < Member.Photos.Count - 1)
        {
            position += 1;
        }
    }

    private void HandlePrev()
    {
        if (position > 0)
        {
            position -= 1;
        }
    }

    private void HandleThumbnailClick(int index)
    {
        position = index;
    }
}
