@inject IRegistrationService RegService
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject IToastService ToastService

<div class="row justify-content-center">
    <div class="col-xs-12 col-md-8 col-lg-6">
        <EditForm Model="@registerUser" OnValidSubmit="HandleValidSubmit" id="SignUpForm" class="card card-body bg-light text-dark mt-5">
            <DataAnnotationsValidator />

            <h2 class="text-center text-primary">Sign up</h2>
            <hr />
            <div class="form-group">
                <InputText @bind-Value="registerUser.Username" class="form-control" type="text" placeholder="Username" />
                <ValidationMessage For="(() => registerUser.Username)" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="registerUser.KnownAs" class="form-control" type="text" placeholder="Preferred name or nickname" />
                <ValidationMessage For="(() => registerUser.KnownAs)" />
            </div>
            <div class="form-group text-center">
                <InputRadioGroup @bind-Value="registerUser.Gender" class="form-control" >
                        <InputRadio Value="@("Female")" class="mx-2" /> Female
                        <InputRadio Value="@("Male")" class="mx-2" /> Male
                    </InputRadioGroup>
                <ValidationMessage For="(() => registerUser.Gender)" />
            </div>
            <div class="form-group">
                <label>Birthdate</label>
                <InputDate @bind-Value="registerUser.DateOfBirth" class="form-control" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="registerUser.City" class="form-control" type="text" placeholder="Town or City" />
                <ValidationMessage For="(() => registerUser.City)" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="registerUser.State" class="form-control" type="text" placeholder="State" />
                <ValidationMessage For="(() => registerUser.State)" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="registerUser.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="(() => registerUser.Password)" />
            </div>
            <div class="form-group">
                <InputText @bind-Value="registerUser.ConfirmPassword" class="form-control" type="password" placeholder="Confirm password" />
                <ValidationMessage For="(() => registerUser.ConfirmPassword)" />
            </div>
            <div id="buttongroup" class="form-group text-center">
                <button class="btn btn-success mx-2" type="submit">Create Account</button>
                <button class="btn btn-outline-danger mx-2" type="button" @onclick="() => HandleCancel()">Cancel</button>
            </div>
        </EditForm>

        @if (showRegError)
        {
            <div class="alert alert-danger text-center" role="alert">
                @regErrorText
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnCancelRegistration { get; set; }

    private RegisterUserModel registerUser = new();
    private bool showRegError = false;
    private string regErrorText;

    private async Task HandleValidSubmit()
    {
        showRegError = false;
        regErrorText = "";

        ServiceResponseModel<AuthUserModel> regResult = await RegService.RegisterAsync(registerUser);

        if (regResult.Success)
        {
            ServiceResponseModel<AuthUserModel> authResult = await AuthService.LoginAsync(new() { Username = registerUser.Username, Password = registerUser.Password });

            if (authResult.Success)
            {
                NavManager.NavigateTo("/members");
            }
            else
            {
                showRegError = true;
                regErrorText = $"Login failed: {authResult.Message}";
                ToastService.ShowError($"Login failed: {authResult.Message}");
            }
        }
        else
        {
            showRegError = true;
            regErrorText = $"Registration failed: {regResult.Message}";
            ToastService.ShowError($"Registration failed: {regResult.Message}");
        }

        registerUser = new();
    }

    private void HandleCancel()
    {
        OnCancelRegistration.InvokeAsync(true);
    }
}