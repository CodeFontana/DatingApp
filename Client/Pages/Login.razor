@page "/login"
@inject IAuthenticationService AuthService
@inject IMemberService MemberService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject AppStateService AppState

<h3 class="text-center">Member Login</h3>

@if (showError)
{
    <div class="alert alert-danger" role="alert">
        @errorText
    </div>
}

<div class="container">
    <EditForm Model="@loginUser" OnValidSubmit="HandleValidSubmit" class="card card-body bg-light text-dark mt-5">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Username</label>
            <InputText @bind-Value="loginUser.Username" class="form-control mr-sm-2" type="text" />
            <ValidationMessage For="(() => loginUser.Username)" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="loginUser.Password" class="form-control mr-sm-2" type="password" />
            <ValidationMessage For="(() => loginUser.Password)" />
        </div>
        <button class="btn btn-success my-2" type="submit">Login</button>
        <button class="btn btn-primary my-2" type="button" @onclick="() => HandleRegister()">Register</button>

    </EditForm>
</div>

@code {
    private LoginUserModel loginUser = new();
    private bool showError = false;
    private string errorText;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            ServiceResponseModel<MemberModel> result = await MemberService.GetMemberAsync(authState.User.Identity.Name);
            
            if (result.Success)
            {
                AppState.AppUser = result.Data;
                AppState.MainPhoto = await MemberService.GetPhotoAsync(AppState.AppUser.Username, AppState.AppUser.MainPhotoFilename);
            }

            NavManager.NavigateTo("/members");
        }
    }

    private async Task HandleValidSubmit()
    {
        showError = false;
        errorText = "";

        ServiceResponseModel<AuthUserModel> result = await AuthService.LoginAsync(loginUser);

        if (result.Success)
        {
            NavManager.NavigateTo("/members");
        }
        else
        {
            errorText = $"Login failed: {result.Message}";
            showError = true;
        }
    }

    private void HandleRegister()
    {
        NavManager.NavigateTo("/register");
    }
}
