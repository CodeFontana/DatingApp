@page "/login"
@inject IAuthenticationService AuthService 
@inject NavigationManager NavManager

<h3>Login</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

<EditForm Model="@loginUser" OnValidSubmit="HandleValidSubmit" class="card card-body bg-dark text-light mt-5">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="loginUser.Username" class="form-control mr-sm-2" type="text" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="loginUser.Password" class="form-control mr-sm-2" type="password" />
    </div>
    <button class="btn btn-primary my-2 my-sm-0" type="submit"><span class="oi oi-account-login" aria-hidden="true"></span> Login</button>

</EditForm>

@code {
    private AuthenticationUserModel loginUser = new();
    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private async Task HandleValidSubmit()
    {
        showAuthenticationError = false;
        AuthenticatedUserModel result = await AuthService.Login(loginUser);

        if (result != null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "Login failed";
            showAuthenticationError = true;
        }
    }
}
