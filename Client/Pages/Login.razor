@page "/login"
@inject IAuthenticationService AuthService
@inject IMemberService MemberService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.ExtraSmall">
    <EditForm Model="@_loginUser" OnValidSubmit="HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <MudCard Elevation="5">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h3" Align="Align.Center">Member Login</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudDivider DividerType="DividerType.Middle" />
            <MudCardContent>
                <MudTextField Label="Username"
                              Class="mt-3" @bind-Value="_loginUser.Username"
                              For="@(() => _loginUser.Username)" />
                <MudTextField Label="Password"
                              Class="mt-3" @bind-Value="_loginUser.Password"
                              For="@(() => _loginUser.Password)"
                              InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions Class="d-flex justify-center mt-5">
                <MudButton Class="mx-2"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.Login">
                    Login
                </MudButton>
                <MudButton Class="mx-2"
                           Size="Size.Large" 
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Filled.EditNote"
                           OnClick="HandleRegister">
                    Register
                </MudButton>
            </MudCardActions>
            @if (_showError)
            {
                <MudAlert Severity="Severity.Error">@_errorText</MudAlert>
            }
        </MudCard>
    </EditForm>
</MudContainer>

@code {
    private LoginUserModel _loginUser = new();
    private bool _showError = false;
    private string _errorText;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/members");
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        _showError = false;
        _errorText = "";

        ServiceResponseModel<AuthUserModel> result = await AuthService.LoginAsync(_loginUser);

        if (result.Success)
        {
            NavManager.NavigateTo("/members");
        }
        else
        {
            _errorText = $"Login failed: {result.Message}";
            _showError = true;
        }
    }

    private void HandleRegister()
    {
        NavManager.NavigateTo("/register");
    }
}
