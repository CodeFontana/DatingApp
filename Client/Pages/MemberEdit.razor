@page "/member/edit"
@attribute [Authorize]
@inject AppStateService AppState
@inject IAuthenticationService AuthService
@inject IMemberService MemberService
@inject IToastService ToastService
@inject IMapper Mapper

@if (showError)
{
    <div class="alert alert-danger" role="alert">
        @errorText
    </div>
}

<div class="row">
    <div class="col-12 col-md-4 text-center">
        <h1>Your profile</h1>
    </div>
    <div class="col-12 col-md-8 text-center">
        @if (changesMade)
        {
            <div class="alert alert-info" role="alert">
                <strong>Changes made: </strong>Remember to save your changes!
            </div>
        }
    </div>
    <div class="col-12 col-md-4">
        <div class="card">
            <img class="card-img-top img-thumbnail mx-auto" src="@AppState.MainPhoto" alt="@AppState.AppUser.KnownAs" />
            <div class="card-body">
                <strong>Location:</strong>
                <p>@AppState.AppUser.City, @AppState.AppUser.State</p>
            </div>
            <div class="card-body">
                <strong>Age:</strong>
                <p>@AppState.AppUser.Age</p>
            </div>
            <div class="card-body">
                <strong>Last active:</strong>
                <p>@AppState.AppUser.LastActive</p>
            </div>
            <div class="card-body">
                <strong>Member since:</strong>
                <p>@AppState.AppUser.Created</p>
            </div>
            @if (changesMade)
            {
                <div class="card-footer">
                    <button class="btn btn-success btn-block" type="submit" form="editForm">Save Changes</button>
                </div>
            }
        </div>
    </div>
    <div class="col-12 col-md-8">
        <TabControl>
            <TabPage Text=@($"About {@AppState.AppUser.KnownAs}")>
                <EditForm id="editForm" Model="@memberUpdate" edit @oninput="(e) => OnProfileUpdated(e)" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <h4>Description</h4>
                    <InputTextArea class="form-control" rows="6" @bind-Value="memberUpdate.Introduction" />
                    <ValidationMessage For="(() => AppState.AppUser.Introduction)" />

                    <h4 class="mt-2">Looking for</h4>
                    <InputTextArea class="form-control" rows="6" @bind-Value="memberUpdate.LookingFor" />
                    <ValidationMessage For="(() => AppState.AppUser.LookingFor)" />

                    <h4 class="mt-2">Interests</h4>
                    <InputTextArea class="form-control" rows="6" @bind-Value="memberUpdate.Interests" />
                    <ValidationMessage For="(() => AppState.AppUser.Interests)" />

                    <h4 class="mt-2">Location Details:</h4>
                    <div class="form-inline">

                        <div class="col-6">
                            <label>City:</label>
                            <InputText class="form-control userinput" @bind-Value="memberUpdate.City" />
                        </div>

                        <div class="col-6">
                            <label>State:</label>
                            <InputText class="form-control userinput" @bind-Value="memberUpdate.State" />
                        </div>

                        <ValidationMessage For="(() => memberUpdate.City)" />
                        <ValidationMessage For="(() => memberUpdate.State)" />

                    </div>

                </EditForm>
            </TabPage>
            <TabPage Text="Edit Photos">
                <PhotoEditor OnImageChanged="ImageChangedCallback" />
            </TabPage>
        </TabControl>
    </div>
</div>

@code {
    private bool showError = false;
    private string errorText;
    private MemberUpdateModel memberUpdate = new();
    private bool changesMade = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMember();
    }

    private async Task LoadMember()
    {
        ServiceResponseModel<MemberModel> result = await MemberService.GetMemberAsync(AppState.AppUser.Username);

        if (result.Success)
        {
            AppState.AppUser = result.Data;
            AppState.MainPhoto = await MemberService.GetPhotoAsync(AppState.AppUser.Username, result.Data.MainPhotoFilename);
            Mapper.Map(AppState.AppUser, memberUpdate);
        }
        else
        {
            errorText = result.Message;
            showError = true;
        }
    }

    private void OnProfileUpdated(ChangeEventArgs e)
    {
        changesMade = true;
    }

    private async Task HandleValidSubmit()
    {
        ServiceResponseModel<string> result = await MemberService.UpdateMemberAsync(memberUpdate);

        if (result.Success)
        {
            ToastService.ShowSuccess("Profile updated successfully");
            changesMade = false;
            showError = false;
            await LoadMember();
        }
        else
        {
            showError = true;
            errorText = $"Profile update failed: {result.Message}";
            ToastService.ShowError($"Profile update failed: {result.Message}");
        }
    }

    private async Task ImageChangedCallback()
    {
        await LoadMember();
    }
}
