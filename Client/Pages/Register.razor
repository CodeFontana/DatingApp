@page "/register"
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IMemberService MemberService
@inject IRegistrationService RegService
@inject IAuthenticationService AuthService
@inject ISnackbar Snackbar

<div>
    <MudContainer MaxWidth="MaxWidth.Small">
        
        <EditForm Model="@_registerUser" OnValidSubmit="OnRegisterAsync">
            <DataAnnotationsValidator />
            
            <MudCard Elevation="5">

                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h2" Align="Align.Center">Sign up</MudText>
                        <MudDivider DividerType="DividerType.Middle" />
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardContent>
                    <div class="d-flex align-center">
                        <MudRadioGroup 
                            Class="mx-auto"
                            @bind-Value="_registerUser.Gender"
                            T="string"
                            Required="true"
                            For="@(() => _registerUser.Gender)">
                            <MudRadio Option="@("Female")">Female</MudRadio>
                            <MudRadio Option="@("Male")">Male</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="Username"
                            Class="mt-3"
                            @bind-Value="_registerUser.Username"
                            For="@(() => _registerUser.Username)" />
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="Preferred name or nickname"
                            Class="mt-3"
                            @bind-Value="_registerUser.KnownAs"
                            For="@(() => _registerUser.KnownAs)" />
                    </div>
                    <div class="d-flex align-center">
                        <MudDatePicker 
                            Label="Birthdate"
                            Class="mt-3"
                            @bind-Date="_registerUser.DateOfBirth"
                            DisableToolbar="true"
                            For="@(() => _registerUser.DateOfBirth)" />
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="Town or City"
                            Class="mt-3"
                            @bind-Value="_registerUser.City"
                            For="@(() => _registerUser.City)" />
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="State or Province"
                            Class="mt-3"
                            @bind-Value="_registerUser.State"
                            For="@(() => _registerUser.State)" />
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="Password"
                            Class="mt-3"
                            @bind-Value="_registerUser.Password"
                            For="@(() => _registerUser.Password)"
                            InputType="@_passwordInput"
                            Adornment="Adornment.End"
                            AdornmentIcon="@_passwordInputIcon"
                            OnAdornmentClick="ToggleShowPassword"
                            AdornmentAriaLabel="Show Password" />
                    </div>
                    <div class="d-flex align-center">
                        <MudTextField 
                            Label="Confirm Password"
                            Class="mt-3"
                            @bind-Value="_registerUser.ConfirmPassword"
                            For="@(() => _registerUser.ConfirmPassword)"
                            InputType="@_passwordInput" />
                    </div>
                </MudCardContent>

                <MudCardActions Class="d-flex justify-center">
                    <MudButton Class="mx-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Create Account</MudButton>
                    <MudButton Class="mx-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" @onclick="() => OnCancel()">Cancel</MudButton>
                </MudCardActions>

            </MudCard>

        </EditForm>

        @if (_showError)
        {
            @if (_showError)
            {
                <MudAlert Severity="Severity.Error">@_errorText</MudAlert>
            }
        }
    </MudContainer>
</div>

@code {
    private RegisterUserModel _registerUser = new();
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _showPassword = false;
    private bool _showError = false;
    private string _errorText;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/members");
        }
    }

    private async Task OnRegisterAsync()
    {
        _showError = false;
        _errorText = "";

        ServiceResponseModel<AuthUserModel> regResult = await RegService.RegisterAsync(_registerUser);

        if (regResult.Success)
        {
            ServiceResponseModel<AuthUserModel> authResult = await AuthService.LoginAsync(new() { Username = _registerUser.Username, Password = _registerUser.Password });

            if (authResult.Success)
            {
                NavManager.NavigateTo("/members");
            }
            else
            {
                _showError = true;
                _errorText = $"Login failed: {authResult.Message}";
                Snackbar.Add($"Login failed: {authResult.Message}", Severity.Error);
            }
        }
        else
        {
            _showError = true;
            _errorText = $"Registration failed: {regResult.Message}";
            Snackbar.Add($"Registration failed: {regResult.Message}", Severity.Error);
        }

        _registerUser = new();
    }

    private void OnCancel()
    {
        NavManager.NavigateTo("/");
    }

    private void ToggleShowPassword()
    {
        if (_showPassword)
        {
            _showPassword = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _showPassword = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}
