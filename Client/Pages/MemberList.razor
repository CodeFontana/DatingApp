@page "/members"
@attribute [Authorize]
@inject IAppUserService AppUserService
@inject IMemberService MemberService
@inject IToastService ToastService

<div class="container">

    <div class="text-center">
        <h2>Your matches - @metaData?.TotalCount found</h2>
    </div>

    <EditForm class="my-3" Model="@MemberService.MembersFilter" OnValidSubmit="HandleFilterSubmitAsync">
        <DataAnnotationsValidator />                    

        <div id="filterForm" class="form-row">
                
            <div class="form-group">
                <label class="bold">Age from: </label>
                <InputNumber id="ageInput" class="form-control ml-1" @bind-Value="@MemberService.MembersFilter.MinAge" />
            </div>

            <div class="form-group px-2">
                <label>Age to: </label>
                <InputNumber id="ageInput" class="form-control ml-1" @bind-Value="@MemberService.MembersFilter.MaxAge" />
            </div>

            <div class="form-group px-2">
                <label>Biology: </label>
                <InputSelect id="genderInput" class="form-control ml-1" @bind-Value="@MemberService.MembersFilter.Gender">
                    <option value="female">Female</option>
                    <option value="male">Male</option>
                </InputSelect>
            </div>

            <div id="buttonOuterGroup">
                <div class="col form-group mx-2">
                    <div class="row">
                        <label>Filters: </label>
                    </div>
                    <div class="row">
                        <div id="filterGroup">
                            <button class="btn btn-primary ml-1" type="submit">Apply Filters</button>
                            <button class="btn btn-info ml-1" type="button" @onclick="HandleFilterResetAsync">Reset Filters</button>
                        </div>
                    </div>
                </div>
                <div class="col form-group mx-2">
                    <div class="row">
                        <label>Sorting: </label>
                    </div>
                    <div class="row">
                        <div id="sortGroup" class="btn-group">
                            <button class="btn btn-dark" type="button" @onclick="@(x => HandleSortSubmitAsync("LastActive"))">Last Active</button>
                            <button class="btn btn-dark" type="button" @onclick="@(x => HandleSortSubmitAsync("Created"))">Newest Members</button>
                        </div>
                    </div>
                </div>
            </div>
                    
        </div>
        <ValidationSummary />
    </EditForm>

    @if (showError)
    {
        <div class="alert alert-danger text-center" role="alert">
            @errorText
        </div>
    }
    else if (members?.Count > 0)
    {
        <div class="row">
            @foreach (MemberModel m in members)
            {
                <div class="col-12 col-sm-6 col-md-4 col-xl-2">
                    <MemberCard Member="m" />
                </div>
            }
        </div>
        
        <div class="d-flex justify-content-center">
                <Pagination MetaData=@metaData Spread="10" PageChanged="HandlePageChangedAsync" />
        </div>
    }

</div>

@code {
    private List<MemberModel> members = new();
    private PaginationModel metaData;
    private bool showError = false;
    private string errorText;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(MemberService.MembersFilter.Gender))
        {
            if (AppUserService.AppUser.Gender.ToLower().Equals("female"))
            {
                MemberService.MembersFilter.Gender = "male";
            }
            else
            {
                MemberService.MembersFilter.Gender = "female";
            }
        }

        await LoadMembersAsync();
    }

    private async Task LoadMembersAsync()
    {
        PaginationResponseModel<IEnumerable<MemberModel>> result = await MemberService.GetMembersAsync(MemberService.MembersFilter);

        if (result.Success)
        {
            showError = false;
            members = result.Data.ToList();
            metaData = result.MetaData;
        }
        else
        {
            showError = true;
            errorText = $"Request failed: {result.Message}";
            ToastService.ShowError($"Request failed: {result.Message}");
        }
    }

    private async Task HandleFilterSubmitAsync()
    {
        if (MemberService.MembersFilter.MinAge > MemberService.MembersFilter.MaxAge)
        {
            showError = true;
            errorText = "Please validate age filters";
        }
        else
        {
            showError = false;
            await LoadMembersAsync();    
        }
    }

    private async Task HandleFilterResetAsync()
    {
        MemberService.MembersFilter.PageNumber = 1;
        MemberService.MembersFilter.PageSize = 10;
        MemberService.MembersFilter.MinAge = 18;
        MemberService.MembersFilter.MaxAge = 99;
        MemberService.MembersFilter.OrderBy = "LastActive";

        if (AppUserService.AppUser.Gender.ToLower().Equals("female"))
        {
            MemberService.MembersFilter.Gender = "male";
        }
        else
        {
            MemberService.MembersFilter.Gender = "female";
        }

        await LoadMembersAsync();
    }

    private async Task HandleSortSubmitAsync(string sortValue)
    {
        MemberService.MembersFilter.OrderBy = sortValue.ToLower();
        await HandleFilterSubmitAsync();
    }

    private async Task HandlePageChangedAsync(int page)
    {
        MemberService.MembersFilter.PageNumber = page;
        members = null;
        await LoadMembersAsync();
    }
}
